GNU计划是从建立一系列的工具开始的
基本的开发工具，如C编译器，调试器，文本编辑器
还有一些其他的必备工具
其最终目的是要开发一个内核
作为这个操作系统的核心
到了1990年，他们已经开发出必备的工具软件
这些软件已经在很多Unix系统上得到广泛应用了
但是内核仍然是“非自由”的
内核成为我们要面对的最后一个问题
我们不久前才开始开发我们自己的内核
就在那个时候，Linus出现了
[“Lin-us”还是“Line-us”？该怎么读，能给我们示范一下发音吗？]
嗯…我说瑞典语的时候，是“Lee-nus”
说芬兰语的时候是“Leen-ous”
说英语的时候是“Line-us”
其实我并不在意人们怎么念
“Linux”就是“Linux”
他开发了一个内核，他的进度比我们要快
他的内核运行良好，也稳定
他把他的内核叫做“Linux”
我的最初目的只是为了满足自己的需要
就是在我自己的计算机上装一个系统
它能类似于我们大学主机上我用惯的系统
我当时没有找到符合要求的现成系统
因为我今后一直要跟计算机打交道
所以我决定自己开发一个这样的系统出来
在开发之初，很多灵感都来自于SunOS
我在大学的时候就用的这个系统
[哪所大学？]
芬兰赫尔辛基大学
我认为从1991年到1993年
是Linux发展的幼儿时期
那个时候Linux是处于开发和测试阶段
并且相对来说很不稳定
不过那个时候的Linux比现在很多所谓的
“成品”操作系统要稳定得多
Linus使用传统的“tried-and-true”方式来写程序
他正是那样做的
并且干得不赖
比我自己预计的要快得多
Linux是单一内核的操作系统
也就是说操作系统本身是一个不可分的整体
它不像微内核系统那样
微内核系统实际上是一组服务程序
分别完成不同的任务
彼此通过一个共同的协议来通讯
来协调它们的动作
[为什么GNU的内核开发的这么慢？
为什么他能后来居上]
GNU Hurd计划在Linux计划开始之前不久就启动了
我们确定了一个非常先进的设计方案
以获得更强大的功能
但随之而来的是调试非常困难
我们的内核不是传统意义上的单一程序
而是分割成许多较小的程序
它们相互间通过异步通信传递消息
问题是，这种设计方案
会产生大量潜在的程序错误
而这些错误又很难定位，因为它们依赖于…
这个程序发出消息是在那个程序发出消息之前或之后…
结果我们花了好几年时间才能让它运行起来